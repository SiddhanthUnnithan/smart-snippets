from types import SimpleNamespace
from flask import Flask, request, make_response, jsonify
from flask import json

from utils import QueryPipeline

app = Flask(__name__)

@app.route("/")
def default():
    """
        Default route.
    """
    response_body = {
        "message": "hello world from smart-snippet server"
    }

    return make_response(jsonify(response_body))

@app.route("/test_openai_engine")
def test_openai_engine():
    """
        Route to test openAI engine with a test prompt.
    """
    qp = QueryPipeline()

    answer = qp.query(testing=True)
    
    response_body = {
        "snippet": answer
    }

    return make_response(jsonify(response_body))

@app.route("/submit_query", methods=['POST'])
def submit_query():
    """
        Route to submit a query against openAI engine.

        Request Parameters
        ------------------
        user_id : {string}
            String identifier for the user - should be VSCodeMachineId.
        
        user_query : {string}
            String representation of user query.
        
        Response
        --------
        message : {string}
            Message based on the result of the query pipeline.
        
        snippet : {string}
            Snippet generated by OpenAI model
        
        snippet_id : {int}
            Snippet identifier (in database). This value is used when submitting the user review.
    """
    response_body = {}

    if request.method != 'POST' or not request.is_json:
        response_body['message'] = 'Invalid request method or request is not JSON'
        response_body['snippet_id'] = None
        response_body['snippet'] = None

        return make_response(jsonify(response_body))

    req = request.get_json()

    user_id = req.get('user_id')
    user_query = req.get('query')

    input_dict = {
        'user_id': user_id,
        'text': user_query
    }

    qp = QueryPipeline()

    build_prompt = qp.build_prompt(input_dict)

    if not build_prompt:
        response_body['message'] = 'Unable to build prompt.'
        response_body['snippet'] = None

        return make_response(jsonify(response_body))

    print(qp.prompt)

    snippet, snippet_id, msg = qp.query()

    if snippet is None:
        response_body['message'] = f'Failure: {msg}'
        response_body['snippet'] = None
        response_body['snippet_id'] = None
    else:
        response_body['message'] = f'Snippet successfully generated! Warning: {msg}'
        response_body['snippet_id'] = snippet_id
        response_body['snippet'] = snippet

    return make_response(jsonify(response_body))

@app.route("/submit_reviewed_snippet", methods=['POST'])
def submit_reviewed_snippet():
    """
        Route for submitting a user-reviewed snippet.

        Request Parameters
        ------------------
        user_id : {str}
            String identifier of the user submitting the review
        
        user_query : {str}
            String representation of user's original query

        snippet_id : {int}
            Identifier of original snippet ID (as returned by the submit_query route)

        reviewed_snippet : {str}
            Snippet reviewed by the user

        Response
        --------
    """
    response_body = {}

    if request.method != 'POST' or not request.is_json:
        response_body['message'] = 'Invalid request method or request is not JSON'
        response_body['snippet'] = None

        return make_response(jsonify(response_body))

    req = request.get_json()

    user_id = req.get('user_id')
    user_query = req.get('user_query')
    original_snippet_id = req.get('snippet_id')
    reviewed_snippet = req.get('reviewed_snippet')

    input_dict = {
        'user_id': user_id,
        'user_query': user_query,
        'snippet_id': original_snippet_id,
        'reviewed_snippet': reviewed_snippet
    }

    qp = QueryPipeline()

    is_inserted, msg = qp.insert_user_reviewed_snippet(input_dict)

    if not is_inserted:
        response_body['message'] = f'Failure: {msg}'
        response_body['isInserted'] = is_inserted
    else:
        response_body['message'] = 'Successfully inserted user reviewed snippet!'
        response_body['isInserted'] = is_inserted

    return make_response(jsonify(response_body))

if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True)
